#include "Character.h"
#include "Stage.h"
#include <imgui.h>
#include "Logger.h"
//行列更新処理
void Character::UpdateTransform()
{
    //スケール行列を作成
    DirectX::XMMATRIX S = DirectX::XMMatrixScaling(scale.x, scale.y, scale.z);
    //回転行列を作成
    DirectX::XMMATRIX R = DirectX::XMMatrixRotationRollPitchYaw(angle.x, angle.y, angle.z);
    //DirectX::XMMATRIX X = DirectX::XMMatrixRotationX(angle.x);
    //DirectX::XMMATRIX Y = DirectX::XMMatrixRotationX(angle.y);
    //DirectX::XMMATRIX Z = DirectX::XMMatrixRotationX(angle.z);
    //DirectX::XMMATRIX R = X * Y * Z;
    
    //位置行列を作成
    DirectX::XMMATRIX T = DirectX::XMMatrixTranslation(position.x, position.y, position.z);
    //3つの行列を組み合わせて、ワールド行列を作成
    DirectX::XMMATRIX W = S * R * T;
    //計算したワールド行列を取り出す
    DirectX::XMStoreFloat4x4(&transform, W);
}

//移動処理
void Character::Move(float vx, float vz, float speed)
{
    //speed *= elapsedTime;
    //position.x += vx * speed;
    //position.z += vz * speed;

    //移動方向ベクトルを設定
    moveVecX = vx;
    moveVecZ = vz;

    //最大速度設定
    maxMoveSpeed = speed;
}

//ジャンプ処理
void Character::Jump(float speed)
{
    //上方向の力を設定
    velocity.y = speed;
}

//衝撃を与える
void Character::AddImpulse(const DirectX::XMFLOAT3& impulse)
{
    //速力に力を加える
    //DirectX::XMVECTOR Impulse=DirectX::XMLoadFloat3(&impulse);
    //DirectX::XMVECTOR Velocity = DirectX::XMLoadFloat3(&velocity);
    //Velocity=DirectX::XMVectorAdd(Impulse, Velocity);
    //DirectX::XMStoreFloat3(&velocity, Velocity);

    velocity.x += impulse.x;
    velocity.y += impulse.y;
    velocity.z += impulse.z;
}

//速力処理更新
void Character::UpdateVelocity(float elapsedTime)
{
    //経過フレーム
    float elapsedFrame = 60.0f * elapsedTime;

    //垂直速力更新処理
    UpdateVertialVelocity(elapsedFrame);

    //水平速力更新処理
    UpdateHorizontalVelocity(elapsedFrame);

    //垂直移動更新処理
    UpdateVertialMove(elapsedTime);

    //水平移動更新処理
    UpdateHorizontalMove(elapsedTime);
}

//垂直速力更新処理
void Character::UpdateVertialVelocity(float elapsedFrame)
{
    //重力処理
    velocity.y += gravity * elapsedFrame;
}

//水平速力更新処理
void Character::UpdateHorizontalVelocity(float elapsedFrame)
{
    //XZ平面の速力を減速する
    float length = fabsf(velocity.x) + fabsf(velocity.z);
    if (length > 0.0f)
    {
        //摩擦力
        float Friction = this->friction * elapsedFrame;

       //空中にいるときは摩擦力を減らす
        if (!isGround)Friction -= airControl;

        //摩擦による横方向の減速処理
        if (length > friction)
        {
            DirectX::XMVECTOR Velocity = DirectX::XMLoadFloat3(&velocity);
            Velocity=DirectX::XMVectorSetY(Velocity, 0);//xz平面にする
            Velocity = DirectX::XMVector3Normalize(Velocity);   //正規化して1にする
            Velocity=DirectX::XMVectorScale(Velocity, friction);    //摩擦を掛ける
            velocity.x -= DirectX::XMVectorGetX(Velocity);
            velocity.z -= DirectX::XMVectorGetZ(Velocity);
        }
        //横方向の速力が摩擦力以下になったので、速力を無効化
        else
        {
            velocity.x = 0;
            velocity.z = 0;
        }

    }

    //XZ平面の速力を加速する
    if (length <= maxMoveSpeed)
    {
        //移動ベクトルがゼロベクトルでないなら加速する
        float moveVecLength = fabsf(moveVecX) + fabsf(moveVecZ);
        if (moveVecLength > 0.0f)
        {
            //加速力
            float acceleration = this->acceleration * elapsedFrame;
           
            //空中にいるときは加速力を減らす
            if (!isGround)acceleration -= airControl;
            
            //移動ベクトルによる加速処理
            velocity.x += moveVecX*acceleration;
            velocity.z += moveVecZ*acceleration;
            
            //最大速度制限
            DirectX::XMVECTOR Velocity = DirectX::XMLoadFloat3(&velocity);
            Velocity = DirectX::XMVectorSetY(Velocity, 0);   //y軸を0に
            DirectX::XMVECTOR Length = DirectX::XMVector3Length(Velocity);

            float length = DirectX::XMVectorGetX(Length);
            //float length = fabsf(velocity.x) + fabsf(velocity.z);
            if (length > maxMoveSpeed)
            {
               //DirectX::XMVECTOR Velocity=DirectX::XMLoadFloat3(&velocity);
               //Velocity = DirectX::XMVectorSetY(Velocity, 0);   //y軸を0に

               Velocity = DirectX::XMVector3Normalize(Velocity);    //正規化して
               Velocity = DirectX::XMVectorScale(Velocity, maxMoveSpeed);//最大速度に設定
               
               velocity.x = DirectX::XMVectorGetX(Velocity);
               velocity.z = DirectX::XMVectorGetZ(Velocity);
            }

            //下り坂でガタガタしないようにする
            if (slopeRate > 0)
            {
                //重力処理
                velocity.y += gravity * elapsedFrame;
            }
        }
    }

    //移動ベクトルをリセット
    moveVecX = 0;
    moveVecZ = 0;
}

//垂直移動更新処理
void Character::UpdateVertialMove(float elapsedTime)
{
    ////移動処理
    //position.y += velocity.y * elapsedTime;

    ////地面判定
    //if (position.y < 0.0f)
    //{
    //    position.y = 0.0f;
    //    velocity.y = 0.0f;

    //    //着地した
    //    if (!IsGround())
    //    {
    //        OnLoadding();
    //        isGround = true;
    //    }
    //}
    //else
    //{
    //    isGround = false;
    //}

    //垂直方向の移動量
    float my = velocity.y * elapsedTime;

    //キャラクターのY軸方向となる法線ベクトル
    DirectX::XMFLOAT3 normal = { 0,1,0 };

    slopeRate = 0.0f;   //坂道がたがた用

    //落下中
    if (my < 0.0f)
    {
        //レイの開始位置は足元より少し上
        DirectX::XMFLOAT3 start = { position.x,position.y + stepOffset,position.z };
        //レイの終点位置は移動後の位置
        DirectX::XMFLOAT3 end = { position.x,position.y + my,position.z };

        //レイキャストによる地面判定
        HitResult hit;
        if (Stage::Instance().RayCast(start, end, hit))
        {
            //法線ベクトル取得

            //地面に接地している
            position.y = hit.position.y;

            //傾斜率の計算( 高さ/(底辺+高さ) )高さはhit.distance

            float syahen = hit.normal.x * hit.normal.x + hit.normal.y * hit.normal.y + hit.normal.z * hit.normal.z;
            float bottom = syahen / 5 * 4;
            float height = syahen / 5 * 3;
            slopeRate = height / (bottom + height);

            //着地した
            if (!isGround)
            {
                OnLanding();
            }
            isGround = true;
            velocity.y = 0.0f;
        }
        else
        {
            //空中に浮いている
            position.y += my;
            isGround = false;
        }
    }
    //上昇中
    else if (my > 0.0f)
    {
        position.y += my;
        isGround = false;
    }
}

//水平移動更新処理
void Character::UpdateHorizontalMove(float elapsedTime)
{
    ////移動処理
    //position.x += velocity.x * elapsedTime;
    //position.z += velocity.z * elapsedTime;
   
    //水平速力量計算
    float velocityLengthXZ = fabsf(velocity.x) + fabsf(velocity.z);
    if (velocityLengthXZ > 0.0f)
    {
        //水平移動量
        float mx = velocity.x * elapsedTime;
        float mz = velocity.z * elapsedTime;

        //レイの開始位置と終点位置
        DirectX::XMFLOAT3 start = { position.x ,position.y + stepOffset ,position.z };
        
        DirectX::XMVECTOR Start = DirectX::XMLoadFloat3(&start);
        DirectX::XMVECTOR StartC = DirectX::XMVectorScale(DirectX::XMVector3Normalize(Start), this->radius);
        Start = DirectX::XMVectorAdd(Start, StartC);
        DirectX::XMStoreFloat3(&start, Start);

        DirectX::XMFLOAT3 end = { start.x + mx ,start.y ,start.z + mz };

        //レイキャストによる壁判定
        HitResult hit;
        if (Stage::Instance().RayCast(start, end, hit))
        {
            //壁までのベクトル
            DirectX::XMVECTOR StartHit = DirectX::XMLoadFloat3(&hit.position);
            DirectX::XMVECTOR End = DirectX::XMLoadFloat3(&end);
            DirectX::XMVECTOR Vec = DirectX::XMVectorSubtract(StartHit, End);

            //壁の法線
            DirectX::XMVECTOR Normal = DirectX::XMLoadFloat3(&hit.normal);
            DirectX::XMFLOAT3 normal;
            DirectX::XMStoreFloat3(&normal, Normal);

            //Logger::Print("x:%.2f y:%.2f z:%.2f\n", normal.x, normal.y, normal.z);

            //入射ベクトルを法線に射影
            DirectX::XMVECTOR Dot = DirectX::XMVector3Dot(Normal, Vec);

            //補正後の計算
            DirectX::XMVECTOR ND = DirectX::XMVectorScale(Normal, DirectX::XMVectorGetX(Dot));
            DirectX::XMVECTOR EndWall = DirectX::XMVectorScale(Normal, DirectX::XMVectorGetX(Dot)*1.2f);

            //補正後に物体があった場合止まる
            DirectX::XMStoreFloat3(&start, Start);
            DirectX::XMStoreFloat3(&end, EndWall);
            start.y += stepOffset * 5;
            end.y += stepOffset * 5;
            if (Stage::Instance().RayCast(start, end, hit))return;  //物体があった場合return

            DirectX::XMVECTOR VecRay = DirectX::XMVectorSubtract(End, Start);
            DirectX::XMVECTOR R = DirectX::XMVectorAdd(VecRay, ND); //壁ずりべくとる取得



            //壁ずり移動
            position.x += DirectX::XMVectorGetX(R);
            position.z += DirectX::XMVectorGetZ(R);

            //コンパイル時定数(https://www.slideshare.net/GenyaMurakami/constexpr-10458089
            constexpr float epsilon = 0.001;

            position.x += normal.x * epsilon;
            position.z += normal.z * epsilon;


            //DirectX::XMVECTOR Pos = DirectX::XMLoadFloat3(&position);
            //Pos = DirectX::XMVectorAdd(Pos,R);
            //DirectX::XMStoreFloat3(&position, Pos);

        }
        else
        {
            //移動
            position.x += mx;
            position.z += mz;
        }
    }
}

//旋回処理
void Character::Turn(float elapsedTime, float vx, float vz, float speed)
{
    speed *= elapsedTime;


    //進行ベクトルを単位ベクトル化
    float moveVecLength = sqrtf(vx * vx + vz * vz);
    if (moveVecLength <= 0)return;  //進行ベクトルがゼロベクトルの場合は処理する必要なし
    if (moveVecLength > 0.0f)
    {
        //単位ベクトル化
        vx /= moveVecLength;
        vz /= moveVecLength;
    }

    //自身の回転値から前方向を決める
    float frontX = sinf(angle.y);
    float frontZ = cosf(angle.y);

    //回転角を求めるため、２つの単位ベクトルの内積を計算する
    float dot = (vx * frontX) + (vz * frontZ);

    //内積値は-1.0~1.0で表現されており、２つの単位ベクトルの角度が
    //小さいほどに1.0に近づくという性質を利用して回転速度を調整する
    float rot = 1.0f - dot; //補正量
    if (rot > speed)rot = speed;

    //左右判定を行うために2つの単位ベクトルの外積を計算する
    float cross = (vx * frontZ) - (vz * frontX);

    //2Dの外積値が正の場合か負の場合によって左右判定が行える
    //左右判定を行うことによって左右回転を選択する
    if (cross < 0.0f)   //右
    {
        angle.y -= rot;
    }
    else
    {
        angle.y += rot;
    }

}

//ダメージを与える
bool Character::ApplyDamage(int damage, float invincibleTime)
{
    //ダメージが0の場合は健康状態を変更する必要がない
    if (damage <= 0)return false;

    //死亡している場合は健康状態を変更しない
    if (health <= 0)return false;

    //無敵時間
    if (invincibleTimer > 0)return false;

    //ダメージ処理
    health -= damage;

    //無敵時間処理
    invincibleTimer = invincibleTime;

    //死亡通知
    if (health <= 0)
    {
        OnDead();
    }
    //ダメージ通知
    else
    {
        OnDamage();
    }

    //健康状態が変更した場合はtrueを返す
    return true;
}

//無敵時間更新
void Character::UpdateInvincible(float elapsedTime)
{
    if (invincibleTimer > 0.0f)
    {
        invincibleTimer -= elapsedTime;
    }
}